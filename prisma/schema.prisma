generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                 String                              @id @default(uuid())
  username                           String                              @unique
  password                           String
  name                               String
  email                              String?                             @unique
  active                             Boolean                             @default(true)
  createdAt                          DateTime                            @default(now())
  updatedAt                          DateTime                            @updatedAt
  status                             UserStatus                          @default(ACTIVE)
  auditorAudits                      Audit[]                             @relation("AuditorAudits")
  createdAudits                      Audit[]                             @relation("CreatedAudits")
  updatedAudits                      Audit[]                             @relation("UpdatedAudits")
  businessContinuitiesCreated        BusinessContinuity[]                @relation("BusinessContinuityCreatedBy")
  businessContinuitiesUpdated        BusinessContinuity[]                @relation("BusinessContinuityUpdatedBy")
  businessContinuityReviews          BusinessContinuityReview[]
  businessContinuityVersions         BusinessContinuityVersion[]
  coshhsCreated                      COSHH[]                             @relation("COSHHCreatedBy")
  coshhsUpdated                      COSHH[]                             @relation("COSHHUpdatedBy")
  coshhReviews                       COSHHReview[]
  coshhVersions                      COSHHVersion[]
  certificatesCreated                Certificate[]                       @relation("CertificateCreatedBy")
  certificateUpdates                 Certificate[]                       @relation("CertificateUpdatedBy")
  certificateReviews                 CertificateReview[]
  certificateVersions                CertificateVersion[]
  correctiveActionsCreated           CorrectiveAction[]                  @relation("CorrectiveActionCreatedBy")
  correctiveActionsUpdated           CorrectiveAction[]                  @relation("CorrectiveActionUpdatedBy")
  correctiveActionReviews            CorrectiveActionReview[]
  correctiveActionVersions           CorrectiveActionVersion[]
  customSectionsCreated              CustomSection[]                     @relation("CustomSectionCreatedBy")
  customSectionsUpdated              CustomSection[]                     @relation("CustomSectionUpdatedBy")
  customSectionReviews               CustomSectionReview[]
  customSectionVersions              CustomSectionVersion[]
  documents                          Document[]
  documentNotificationSettings       DocumentNotificationSettings?
  documentVersions                   DocumentVersion[]
  employee                           Employee?
  uploadedEmployeeDocuments          EmployeeDocument[]
  environmentalGuidanceCreated       EnvironmentalGuidance[]             @relation("EnvironmentalGuidanceCreatedBy")
  environmentalGuidanceUpdated       EnvironmentalGuidance[]             @relation("EnvironmentalGuidanceUpdatedBy")
  environmentalGuidanceReviews       EnvironmentalGuidanceReview[]
  environmentalGuidanceVersions      EnvironmentalGuidanceVersion[]
  formsCreated                       Form[]                              @relation("FormCreatedBy")
  formUpdates                        Form[]                              @relation("FormUpdatedBy")
  FormReviews                        FormReview[]
  formVersions                       FormVersion[]
  hseGuidancesCreated                HseGuidance[]                       @relation("HseGuidanceCreatedBy")
  hseGuidancesUpdated                HseGuidance[]                       @relation("HseGuidanceUpdatedBy")
  hseGuidanceReviews                 HseGuidanceReview[]
  hseGuidanceVersions                HseGuidanceVersion[]
  improvementDocuments               ImprovementDocument[]
  improvementDocumentVersions        ImprovementDocumentVersion[]
  improvementCompletedBy             ImprovementRegister[]               @relation("ImprovementCompletedBy")
  improvementInternalOwner           ImprovementRegister[]               @relation("ImprovementInternalOwner")
  improvementInternalRaisedBy        ImprovementRegister[]               @relation("ImprovementInternalRaisedBy")
  improvementRegisterSectionReviews  ImprovementRegisterSectionReview[]
  improvementRegisterSectionVersions ImprovementRegisterSectionVersion[]
  interestedParties                  InterestedParty[]                   @relation("InterestedPartyCreatedBy")
  interestedPartyUpdates             InterestedParty[]                   @relation("InterestedPartyUpdatedBy")
  interestedPartyReviews             InterestedPartyReview[]
  interestedPartyVersions            InterestedPartyVersion[]
  acceptedInvites                    Invite[]                            @relation("AcceptedInvites")
  invites                            Invite[]                            @relation("UserInvites")
  jobDescriptionsCreated             JobDescription[]                    @relation("JobDescriptionCreatedBy")
  jobDescriptionsUpdated             JobDescription[]                    @relation("JobDescriptionUpdatedBy")
  jobDescriptionReviews              JobDescriptionReview[]
  jobDescriptionVersions             JobDescriptionVersion[]
  legalRegistersCreated              LegalRegister[]                     @relation("LegalRegisterCreatedBy")
  legalRegistersUpdated              LegalRegister[]                     @relation("LegalRegisterUpdatedBy")
  legalRegisterDocuments             LegalRegisterDocument[]
  legalRegisterReviews               LegalRegisterReview[]
  legalRegisterVersions              LegalRegisterVersion[]
  maintenanceCreated                 Maintenance[]                       @relation("MaintenanceCreatedBy")
  maintenanceUpdated                 Maintenance[]                       @relation("MaintenanceUpdatedBy")
  maintenanceDocuments               MaintenanceDocument[]
  maintenanceDocumentReviews         MaintenanceDocumentReview[]
  maintenanceDocumentVersions        MaintenanceDocumentVersion[]
  maintenanceSectionReviews          MaintenanceSectionReview[]
  maintenanceSectionVersions         MaintenanceSectionVersion[]
  managementReviewsCreated           ManagementReview[]                  @relation("ManagementReviewCreatedBy")
  managementReviewsUpdated           ManagementReview[]                  @relation("ManagementReviewUpdatedBy")
  managementReviewReviews            ManagementReviewReview[]
  managementReviewVersions           ManagementReviewVersion[]
  manuals                            Manual[]                            @relation("ManualCreatedBy")
  manualUpdates                      Manual[]                            @relation("ManualUpdatedBy")
  manualReviews                      ManualReview[]
  manualVersions                     ManualVersion[]
  objectivesCreated                  Objective[]                         @relation("ObjectiveCreatedBy")
  objectivesUpdated                  Objective[]                         @relation("ObjectiveUpdatedBy")
  objectiveSectionReviews            ObjectiveSectionReview[]
  objectiveSectionVersions           ObjectiveSectionVersion[]
  orgContextsCreated                 OrganizationalContext[]             @relation("OrgContextCreatedBy")
  orgContextsUpdated                 OrganizationalContext[]             @relation("OrgContextUpdatedBy")
  orgContextReviews                  OrganizationalContextReview[]
  orgContextVersions                 OrganizationalContextVersion[]
  permissions                        Permission[]
  policies                           Policy[]                            @relation("PolicyCreatedBy")
  policyUpdates                      Policy[]                            @relation("PolicyUpdatedBy")
  policyVersions                     PolicyVersion[]
  procedures                         Procedure[]                         @relation("ProcedureCreatedBy")
  procedureUpdates                   Procedure[]                         @relation("ProcedureUpdatedBy")
  procedureReviews                   ProcedureReview[]
  procedureVersions                  ProcedureVersion[]
  registersCreated                   Register[]                          @relation("RegisterCreatedBy")
  registersUpdated                   Register[]                          @relation("RegisterUpdatedBy")
  registerReviews                    RegisterReview[]
  registerVersions                   RegisterVersion[]
  riskAssessmentsCreated             RiskAssessment[]                    @relation("RiskAssessmentCreatedBy")
  riskAssessmentsUpdated             RiskAssessment[]                    @relation("RiskAssessmentUpdatedBy")
  riskAssessmentReviews              RiskAssessmentReview[]
  riskAssessmentVersions             RiskAssessmentVersion[]
  assignedSupplierDocuments          SupplierDocument[]                  @relation("SupplierDocumentAssignedTo")
  supplierDocuments                  SupplierDocument[]
  supplierDocumentVersions           SupplierDocumentVersion[]
  technicalFilesCreated              TechnicalFile[]                     @relation("TechnicalFileCreatedBy")
  technicalFilesUpdated              TechnicalFile[]                     @relation("TechnicalFileUpdatedBy")
  technicalFileReviews               TechnicalFileReview[]
  technicalFileVersions              TechnicalFileVersion[]
  groups                             UserGroup[]
  workInstructionsCreated            WorkInstruction[]                   @relation("WorkInstructionCreatedBy")
  workInstructionsUpdated            WorkInstruction[]                   @relation("WorkInstructionUpdatedBy")
  workInstructionReviews             WorkInstructionReview[]
  workInstructionVersions            WorkInstructionVersion[]
}

model Role {
  id               String            @id @default(uuid())
  name             String            @unique
  description      String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  systemId         String            @default("business-smart-suite")
  groupPermissions GroupPermission[]
  invites          Invite[]
  permissions      Permission[]

  @@index([name])
  @@index([systemId])
}

model Permission {
  id        String    @id @default(uuid())
  userId    String
  systemId  String
  roleId    String
  expiry    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String?
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, systemId, roleId])
  @@index([userId])
  @@index([systemId])
  @@index([expiry])
}

model Group {
  id               String            @id @default(uuid())
  name             String            @unique
  description      String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  groupPermissions GroupPermission[]
  users            UserGroup[]

  @@index([name])
}

model UserGroup {
  id        String   @id @default(uuid())
  userId    String
  groupId   String
  createdAt DateTime @default(now())
  addedBy   String?
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@index([userId])
  @@index([groupId])
}

model GroupPermission {
  id        String    @id @default(uuid())
  groupId   String
  systemId  String
  roleId    String
  expiry    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  createdBy String?
  group     Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([groupId, systemId, roleId])
  @@index([groupId])
  @@index([systemId])
  @@index([expiry])
}

model Invite {
  id             String       @id @default(uuid())
  name           String
  email          String
  systemId       String
  roleId         String?
  invitedBy      String
  status         InviteStatus @default(PENDING)
  token          String       @unique
  expiresAt      DateTime
  createdAt      DateTime     @default(now())
  userId         String?
  acceptedBy     String?
  acceptedByUser User?        @relation("AcceptedInvites", fields: [acceptedBy], references: [id])
  role           Role?        @relation(fields: [roleId], references: [id])
  user           User?        @relation("UserInvites", fields: [userId], references: [id])

  @@index([email])
  @@index([token])
  @@index([status])
  @@index([expiresAt])
}

model PermissionAudit {
  id          String   @id @default(uuid())
  action      String
  userId      String
  systemId    String
  roleId      String
  performedBy String
  details     Json?
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([performedBy])
  @@index([createdAt])
}

model PolicyCategory {
  id          String   @id @default(uuid())
  title       String
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  archived    Boolean  @default(false)
  highlighted Boolean  @default(false)
  policies    Policy[]
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Policy {
  id          String          @id @default(uuid())
  title       String
  version     String
  issueDate   DateTime
  location    String
  content     String?
  categoryId  String
  createdById String
  updatedById String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  archived    Boolean         @default(false)
  order       Int             @default(0)
  highlighted Boolean         @default(false)
  approved    Boolean         @default(false)
  documents   Document[]
  category    PolicyCategory  @relation(fields: [categoryId], references: [id])
  createdBy   User            @relation("PolicyCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?           @relation("PolicyUpdatedBy", fields: [updatedById], references: [id])
  versions    PolicyVersion[]
}

model PolicyVersion {
  id          String    @id @default(uuid())
  policyId    String
  version     String
  issueDate   DateTime
  notes       String?
  createdAt   DateTime  @default(now())
  createdById String
  documentId  String?
  createdBy   User      @relation(fields: [createdById], references: [id])
  document    Document? @relation(fields: [documentId], references: [id])
  policy      Policy    @relation(fields: [policyId], references: [id])
}

model Document {
  id                            String                         @id @default(uuid())
  title                         String
  fileUrl                       String
  fileType                      String
  size                          Int
  uploadedById                  String
  uploadedAt                    DateTime                       @default(now())
  relatedEntityId               String?
  relatedEntityType             String?
  policyId                      String?
  certificateId                 String?
  formId                        String?
  manualId                      String?
  procedureId                   String?
  businessContinuityId          String?
  correctiveActionId            String?
  coshhId                       String?
  jobDescriptionId              String?
  managementReviewId            String?
  workInstructionId             String?
  customSectionId               String?
  environmentalGuidanceId       String?
  hseGuidanceId                 String?
  registerId                    String?
  riskAssessmentId              String?
  technicalFileId               String?
  businessContinuityVersions    BusinessContinuityVersion[]
  coshhVersions                 COSHHVersion[]
  certificateVersions           CertificateVersion[]
  correctiveActionVersions      CorrectiveActionVersion[]
  customSectionVersions         CustomSectionVersion[]         @relation("CustomSectionVersionDocument")
  businessContinuity            BusinessContinuity?            @relation(fields: [businessContinuityId], references: [id])
  certificate                   Certificate?                   @relation(fields: [certificateId], references: [id])
  correctiveAction              CorrectiveAction?              @relation(fields: [correctiveActionId], references: [id])
  coshh                         COSHH?                         @relation(fields: [coshhId], references: [id])
  customSection                 CustomSection?                 @relation("CustomSectionDocuments", fields: [customSectionId], references: [id], onDelete: Cascade)
  environmentalGuidance         EnvironmentalGuidance?         @relation(fields: [environmentalGuidanceId], references: [id])
  form                          Form?                          @relation(fields: [formId], references: [id])
  hseGuidance                   HseGuidance?                   @relation(fields: [hseGuidanceId], references: [id])
  jobDescription                JobDescription?                @relation(fields: [jobDescriptionId], references: [id])
  managementReview              ManagementReview?              @relation(fields: [managementReviewId], references: [id])
  manual                        Manual?                        @relation(fields: [manualId], references: [id])
  policy                        Policy?                        @relation(fields: [policyId], references: [id])
  procedure                     Procedure?                     @relation(fields: [procedureId], references: [id])
  register                      Register?                      @relation(fields: [registerId], references: [id])
  riskAssessment                RiskAssessment?                @relation(fields: [riskAssessmentId], references: [id])
  technicalFile                 TechnicalFile?                 @relation(fields: [technicalFileId], references: [id])
  uploadedBy                    User                           @relation(fields: [uploadedById], references: [id])
  workInstruction               WorkInstruction?               @relation(fields: [workInstructionId], references: [id])
  versions                      DocumentVersion[]
  environmentalGuidanceVersions EnvironmentalGuidanceVersion[]
  formVersions                  FormVersion[]
  hseGuidanceVersions           HseGuidanceVersion[]
  jobDescriptionVersions        JobDescriptionVersion[]
  managementReviewVersions      ManagementReviewVersion[]
  manualVersions                ManualVersion[]
  policyVersions                PolicyVersion[]
  procedureVersions             ProcedureVersion[]
  registerVersions              RegisterVersion[]
  riskAssessmentVersions        RiskAssessmentVersion[]
  technicalFileVersions         TechnicalFileVersion[]
  workInstructionVersions       WorkInstructionVersion[]
  audits                        Audit[]                        @relation("AuditToDocument")
}

model DocumentVersion {
  id          String   @id @default(uuid())
  documentId  String
  version     String
  fileUrl     String
  createdById String
  createdAt   DateTime @default(now())
  notes       String?
  createdBy   User     @relation(fields: [createdById], references: [id])
  document    Document @relation(fields: [documentId], references: [id])
}

model RootCause {
  id        String   @id @default(uuid())
  name      String
  value     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AchievementRate {
  id        String   @id @default(uuid())
  name      String
  timely    Int
  overdue   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CostOfQuality {
  id        String   @id @default(uuid())
  name      String
  value     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Audit {
  id                    String          @id @default(uuid())
  title                 String
  plannedStartDate      DateTime
  actualStartDate       DateTime?
  followUpDate          DateTime?
  dateCompleted         DateTime?
  auditorId             String?
  externalAuditor       String?
  status                String          @default("not_started")
  createNextAudit       Boolean         @default(false)
  nextAuditDate         DateTime?
  createdById           String
  updatedById           String?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  archived              Boolean         @default(false)
  hasGeneratedNextAudit Boolean         @default(false)
  number                Int             @unique
  auditor               User?           @relation("AuditorAudits", fields: [auditorId], references: [id])
  createdBy             User            @relation("CreatedAudits", fields: [createdById], references: [id])
  updatedBy             User?           @relation("UpdatedAudits", fields: [updatedById], references: [id])
  auditDocuments        AuditDocument[]
  documents             Document[]      @relation("AuditToDocument")
}

model AuditDocument {
  id        String   @id @default(uuid())
  auditId   String
  docType   String
  docId     String
  docName   String
  createdAt DateTime @default(now())
  audit     Audit    @relation(fields: [auditId], references: [id])
}

model InterestedParty {
  id                      String                   @id @default(uuid())
  name                    String
  description             String?
  needsExpectations       String?
  initialLikelihood       Int                      @default(3)
  initialSeverity         Int                      @default(3)
  controlsRecommendations String?
  residualLikelihood      Int                      @default(1)
  residualSeverity        Int                      @default(3)
  riskLevel               Int
  residualRiskLevel       Int
  createdById             String
  updatedById             String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  archived                Boolean                  @default(false)
  order                   Int                      @default(0)
  createdBy               User                     @relation("InterestedPartyCreatedBy", fields: [createdById], references: [id])
  updatedBy               User?                    @relation("InterestedPartyUpdatedBy", fields: [updatedById], references: [id])
  reviews                 InterestedPartyReview[]
  versions                InterestedPartyVersion[]
}

model InterestedPartyVersion {
  id                      String          @id @default(uuid())
  interestedPartyId       String
  version                 String
  name                    String
  description             String?
  needsExpectations       String?
  initialLikelihood       Int
  initialSeverity         Int
  controlsRecommendations String?
  residualLikelihood      Int
  residualSeverity        Int
  riskLevel               Int
  residualRiskLevel       Int
  amendmentDetails        String?
  createdById             String
  createdAt               DateTime        @default(now())
  createdBy               User            @relation(fields: [createdById], references: [id])
  interestedParty         InterestedParty @relation(fields: [interestedPartyId], references: [id], onDelete: Cascade)

  @@index([interestedPartyId])
}

model InterestedPartyReview {
  id                String          @id @default(uuid())
  interestedPartyId String
  reviewerName      String
  reviewDetails     String?
  reviewDate        DateTime
  nextReviewDate    DateTime?
  createdById       String
  createdAt         DateTime        @default(now())
  createdBy         User            @relation(fields: [createdById], references: [id])
  interestedParty   InterestedParty @relation(fields: [interestedPartyId], references: [id], onDelete: Cascade)

  @@index([interestedPartyId])
}

model OrganizationalContext {
  id                      String                         @id @default(uuid())
  category                String
  subCategory             String
  issue                   String
  initialLikelihood       Int
  initialSeverity         Int
  initialRiskLevel        Int
  controlsRecommendations String
  residualLikelihood      Int
  residualSeverity        Int
  residualRiskLevel       Int
  objectives              String[]
  createdById             String
  updatedById             String?
  createdAt               DateTime                       @default(now())
  updatedAt               DateTime                       @updatedAt
  archived                Boolean                        @default(false)
  createdBy               User                           @relation("OrgContextCreatedBy", fields: [createdById], references: [id])
  updatedBy               User?                          @relation("OrgContextUpdatedBy", fields: [updatedById], references: [id])
  reviews                 OrganizationalContextReview[]
  versions                OrganizationalContextVersion[]
}

model OrganizationalContextVersion {
  id                      String                @id @default(uuid())
  organizationalContextId String
  version                 String
  category                String
  subCategory             String
  issue                   String
  initialLikelihood       Int
  initialSeverity         Int
  initialRiskLevel        Int
  controlsRecommendations String
  residualLikelihood      Int
  residualSeverity        Int
  residualRiskLevel       Int
  objectives              String[]
  amendmentDetails        String?
  createdById             String
  createdAt               DateTime              @default(now())
  createdBy               User                  @relation(fields: [createdById], references: [id])
  organizationalContext   OrganizationalContext @relation(fields: [organizationalContextId], references: [id], onDelete: Cascade)

  @@index([organizationalContextId])
}

model OrganizationalContextReview {
  id                      String                @id @default(uuid())
  organizationalContextId String
  reviewerName            String
  reviewDetails           String?
  reviewDate              DateTime
  nextReviewDate          DateTime?
  createdById             String
  createdAt               DateTime              @default(now())
  createdBy               User                  @relation(fields: [createdById], references: [id])
  organizationalContext   OrganizationalContext @relation(fields: [organizationalContextId], references: [id], onDelete: Cascade)

  @@index([organizationalContextId])
}

model Objective {
  id                String    @id @default(uuid())
  source            String?
  categories        String[]
  objective         String
  target            String
  resourcesRequired String
  progressToDate    String
  who               String
  dueDate           DateTime?
  likelihood        Int       @default(1)
  severity          Int       @default(1)
  riskLevel         Int       @default(1)
  dateCompleted     DateTime?
  completed         Boolean   @default(false)
  createdById       String
  updatedById       String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  archived          Boolean   @default(false)
  createdBy         User      @relation("ObjectiveCreatedBy", fields: [createdById], references: [id])
  updatedBy         User?     @relation("ObjectiveUpdatedBy", fields: [updatedById], references: [id])
}

model ObjectiveSectionVersion {
  id               String   @id @default(uuid())
  version          String
  amendmentDetails String?
  createdById      String
  createdAt        DateTime @default(now())
  createdBy        User     @relation(fields: [createdById], references: [id])
}

model ObjectiveSectionReview {
  id             String    @id @default(uuid())
  reviewerName   String
  reviewDetails  String?
  reviewDate     DateTime
  nextReviewDate DateTime?
  createdById    String
  createdAt      DateTime  @default(now())
  createdBy      User      @relation(fields: [createdById], references: [id])
}

model Maintenance {
  id             String                @id @default(uuid())
  name           String
  category       String
  subCategory    String
  supplier       String?
  serialNumber   String?
  reference      String?
  actionRequired String
  frequency      String
  dueDate        DateTime
  owner          String
  allocatedTo    String?
  dateCompleted  DateTime?
  completed      Boolean               @default(false)
  createNext     Boolean               @default(false)
  nextDueDate    DateTime?
  tolerance      String?
  createdById    String
  updatedById    String?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  archived       Boolean               @default(false)
  createdBy      User                  @relation("MaintenanceCreatedBy", fields: [createdById], references: [id])
  updatedBy      User?                 @relation("MaintenanceUpdatedBy", fields: [updatedById], references: [id])
  documents      MaintenanceDocument[]
}

model MaintenanceSectionVersion {
  id               String   @id @default(uuid())
  version          String
  amendmentDetails String?
  createdById      String
  createdAt        DateTime @default(now())
  createdBy        User     @relation(fields: [createdById], references: [id])
}

model MaintenanceSectionReview {
  id             String    @id @default(uuid())
  reviewerName   String
  reviewDetails  String?
  reviewDate     DateTime
  nextReviewDate DateTime?
  createdById    String
  createdAt      DateTime  @default(now())
  createdBy      User      @relation(fields: [createdById], references: [id])
}

model MaintenanceDocument {
  id            String                       @id @default(uuid())
  maintenanceId String
  title         String
  fileUrl       String
  fileType      String
  size          Int
  uploadedById  String
  uploadedAt    DateTime                     @default(now())
  maintenance   Maintenance                  @relation(fields: [maintenanceId], references: [id], onDelete: Cascade)
  uploadedBy    User                         @relation(fields: [uploadedById], references: [id])
  reviews       MaintenanceDocumentReview[]
  versions      MaintenanceDocumentVersion[]
}

model MaintenanceDocumentVersion {
  id          String              @id @default(uuid())
  documentId  String
  version     String
  fileUrl     String
  createdById String
  createdAt   DateTime            @default(now())
  notes       String?
  createdBy   User                @relation(fields: [createdById], references: [id])
  document    MaintenanceDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model MaintenanceDocumentReview {
  id             String              @id @default(uuid())
  documentId     String
  reviewerName   String?
  reviewDetails  String
  reviewDate     DateTime
  nextReviewDate DateTime?
  createdById    String
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  createdBy      User                @relation(fields: [createdById], references: [id])
  document       MaintenanceDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model ImprovementRegister {
  id                    String                @id @default(uuid())
  number                Int
  numberSuffix          String?
  category              String
  otherCategory         String?
  type                  String
  description           String
  originator            String?
  evaluatedForSimilar   Boolean               @default(false)
  requiresRiskAnalysis  Boolean               @default(false)
  affectedPolicies      Boolean               @default(false)
  justified             Boolean               @default(false)
  containmentAction     String?
  rootCauseType         String?
  rootCause             String?
  correctiveAction      String?
  comments              String?
  internalOwnerId       String?
  externalOwner         String?
  internalRaisedById    String?
  externalRaisedBy      String?
  dateRaised            DateTime
  dateDue               DateTime?
  dateActionTaken       DateTime?
  likelihoodRating      Int?
  severityRating        Int?
  restrictedAccess      Boolean               @default(false)
  restrictedUsers       String[]
  dateCompleted         DateTime?
  completedById         String?
  effectivenessOfAction String?
  cost                  Float                 @default(0)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  archived              Boolean               @default(false)
  documents             ImprovementDocument[]
  completedBy           User?                 @relation("ImprovementCompletedBy", fields: [completedById], references: [id])
  internalOwner         User?                 @relation("ImprovementInternalOwner", fields: [internalOwnerId], references: [id])
  internalRaisedBy      User?                 @relation("ImprovementInternalRaisedBy", fields: [internalRaisedById], references: [id])
}

model ImprovementDocument {
  id            String                       @id @default(uuid())
  improvementId String
  title         String
  fileUrl       String
  fileType      String
  size          Int
  uploadedById  String
  uploadedAt    DateTime                     @default(now())
  improvement   ImprovementRegister          @relation(fields: [improvementId], references: [id], onDelete: Cascade)
  uploadedBy    User                         @relation(fields: [uploadedById], references: [id])
  versions      ImprovementDocumentVersion[]
}

model ImprovementDocumentVersion {
  id          String              @id @default(uuid())
  documentId  String
  version     String
  fileUrl     String
  createdById String
  createdAt   DateTime            @default(now())
  notes       String?
  createdBy   User                @relation(fields: [createdById], references: [id])
  document    ImprovementDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model ImprovementRegisterSectionVersion {
  id               String   @id @default(uuid())
  version          String
  amendmentDetails String?
  createdById      String
  createdAt        DateTime @default(now())
  createdBy        User     @relation(fields: [createdById], references: [id])
}

model ImprovementRegisterSectionReview {
  id             String    @id @default(uuid())
  reviewerName   String
  reviewDetails  String?
  reviewDate     DateTime
  nextReviewDate DateTime?
  createdById    String
  createdAt      DateTime  @default(now())
  createdBy      User      @relation(fields: [createdById], references: [id])
}

model StatementOfApplicabilityControl {
  id               String    @id @default(uuid())
  clause           String
  title            String
  description      String
  applicable       Boolean   @default(false)
  relatedControls  String?
  justification    String?
  implemented      Boolean   @default(false)
  dateLastAssessed DateTime?
  section          String
  order            Int
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model StatementOfApplicabilityVersion {
  id        String   @id @default(uuid())
  number    Int
  date      DateTime
  details   String
  updatedBy String
  createdAt DateTime @default(now())
}

model StatementOfApplicabilityReview {
  id             String    @id @default(uuid())
  reviewedBy     String
  details        String
  reviewDate     DateTime
  nextReviewDate DateTime?
  createdAt      DateTime  @default(now())
}

model Supplier {
  id                      String             @id @default(uuid())
  name                    String
  provisionOf             String
  certifications          String?
  contactName             String?
  address                 String?
  contactNumber           String?
  website                 String?
  dateAdded               DateTime           @default(now())
  reviewFrequency         String?
  lastReviewDate          DateTime?
  lastReviewedBy          String?
  riskLikelihood          Int                @default(1)
  riskSeverity            Int                @default(1)
  controlsRecommendations String?
  residualLikelihood      Int                @default(1)
  residualSeverity        Int                @default(1)
  archived                Boolean            @default(false)
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  documents               SupplierDocument[]
  reviews                 SupplierReview[]
}

model SupplierReview {
  id             String    @id @default(uuid())
  supplierId     String
  reviewedBy     String
  details        String?
  reviewDate     DateTime
  nextReviewDate DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  supplier       Supplier  @relation(fields: [supplierId], references: [id])
}

model SupplierVersion {
  id        String   @id @default(uuid())
  number    Int
  date      DateTime
  details   String?
  updatedBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SupplierDocument {
  id                   String                    @id @default(uuid())
  supplierId           String
  title                String
  fileUrl              String
  fileType             String
  size                 Int
  uploadedById         String
  uploadedAt           DateTime                  @default(now())
  expiryDate           DateTime?
  assignedUserId       String?
  lastNotificationSent DateTime?
  assignedUser         User?                     @relation("SupplierDocumentAssignedTo", fields: [assignedUserId], references: [id])
  supplier             Supplier                  @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  uploadedBy           User                      @relation(fields: [uploadedById], references: [id])
  versions             SupplierDocumentVersion[]
}

model SupplierDocumentVersion {
  id          String           @id @default(uuid())
  documentId  String
  version     String
  fileUrl     String
  createdById String
  createdAt   DateTime         @default(now())
  notes       String?
  createdBy   User             @relation(fields: [createdById], references: [id])
  document    SupplierDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

model DocumentNotificationSettings {
  id                 String   @id @default(uuid())
  userId             String   @unique
  notification30Days Boolean  @default(true)
  notification14Days Boolean  @default(true)
  notification7Days  Boolean  @default(true)
  notification1Day   Boolean  @default(true)
  emailEnabled       Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Employee {
  id             String             @id @default(uuid())
  firstName      String
  surname        String
  occupation     String
  department     String
  profilePicture String?
  systemUserId   String?            @unique
  archived       Boolean            @default(false)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  systemUser     User?              @relation(fields: [systemUserId], references: [id])
  documents      EmployeeDocument[]
  employeeSkills EmployeeSkill[]
}

model Skill {
  id             String          @id @default(uuid())
  name           String
  description    String
  frequencyDays  Int             @default(0)
  departments    String[]
  mandatory      Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  employeeSkills EmployeeSkill[]
}

model EmployeeSkill {
  id            String   @id @default(uuid())
  employeeId    String
  skillId       String
  dateCompleted DateTime
  evidence      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  employee      Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  skill         Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([employeeId, skillId])
}

model EmployeeDocument {
  id           String   @id @default(uuid())
  employeeId   String
  title        String
  fileUrl      String
  fileType     String
  uploadedById String
  uploadedAt   DateTime @default(now())
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
}

model LegalRegisterDocument {
  id              String        @id @default(uuid())
  title           String
  fileUrl         String
  fileType        String
  size            Int
  uploadedById    String
  uploadedAt      DateTime      @default(now())
  legalRegisterId String
  legalRegister   LegalRegister @relation(fields: [legalRegisterId], references: [id])
  uploadedBy      User          @relation(fields: [uploadedById], references: [id])
}

model LegalRegister {
  id               String                  @id @default(uuid())
  section          String
  legislation      String
  webAddress       String?
  regulator        String
  requirements     String
  applicability    String
  complianceRating String
  furtherAction    String?
  reviewed         DateTime?
  createdAt        DateTime                @default(now())
  updatedAt        DateTime                @updatedAt
  createdById      String
  updatedById      String?
  archived         Boolean                 @default(false)
  approved         Boolean                 @default(false)
  regions          String[]
  createdBy        User                    @relation("LegalRegisterCreatedBy", fields: [createdById], references: [id])
  updatedBy        User?                   @relation("LegalRegisterUpdatedBy", fields: [updatedById], references: [id])
  documents        LegalRegisterDocument[]
  reviews          LegalRegisterReview[]
  versions         LegalRegisterVersion[]
}

model LegalRegisterVersion {
  id              String        @id @default(uuid())
  legalRegisterId String
  date            DateTime
  details         String
  updatedById     String
  createdAt       DateTime      @default(now())
  legalRegister   LegalRegister @relation(fields: [legalRegisterId], references: [id])
  updatedBy       User          @relation(fields: [updatedById], references: [id])
}

model LegalRegisterReview {
  id              String        @id @default(uuid())
  legalRegisterId String
  reviewedById    String
  details         String
  reviewDate      DateTime
  nextReviewDate  DateTime?
  createdAt       DateTime      @default(now())
  legalRegister   LegalRegister @relation(fields: [legalRegisterId], references: [id])
  reviewedBy      User          @relation(fields: [reviewedById], references: [id])
}

model ManualCategory {
  id          String   @id @default(uuid())
  title       String
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  archived    Boolean  @default(false)
  highlighted Boolean  @default(false)
  manuals     Manual[]
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Manual {
  id          String          @id @default(uuid())
  title       String
  version     String
  issueDate   DateTime
  location    String
  content     String?
  categoryId  String
  createdById String
  updatedById String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  archived    Boolean         @default(false)
  order       Int             @default(0)
  highlighted Boolean         @default(false)
  approved    Boolean         @default(false)
  documents   Document[]
  category    ManualCategory  @relation(fields: [categoryId], references: [id])
  createdBy   User            @relation("ManualCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?           @relation("ManualUpdatedBy", fields: [updatedById], references: [id])
  reviews     ManualReview[]
  versions    ManualVersion[]
}

model ManualVersion {
  id          String    @id @default(uuid())
  manualId    String
  version     String
  issueDate   DateTime
  notes       String?
  createdAt   DateTime  @default(now())
  createdById String
  documentId  String?
  createdBy   User      @relation(fields: [createdById], references: [id])
  document    Document? @relation(fields: [documentId], references: [id])
  manual      Manual    @relation(fields: [manualId], references: [id])
}

model ManualReview {
  id             String    @id @default(uuid())
  manualId       String
  reviewedById   String
  reviewerName   String?
  details        String
  reviewDate     DateTime
  nextReviewDate DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  manual         Manual    @relation(fields: [manualId], references: [id], onDelete: Cascade)
  reviewedBy     User      @relation(fields: [reviewedById], references: [id])
}

model ProcedureCategory {
  id          String      @id @default(uuid())
  title       String
  order       Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  archived    Boolean     @default(false)
  highlighted Boolean     @default(false)
  procedures  Procedure[]
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Procedure {
  id          String             @id @default(uuid())
  title       String
  version     String
  issueDate   DateTime
  location    String
  categoryId  String
  createdById String
  updatedById String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  archived    Boolean            @default(false)
  order       Int                @default(0)
  approved    Boolean            @default(false)
  content     String?
  highlighted Boolean            @default(false)
  documents   Document[]
  category    ProcedureCategory  @relation(fields: [categoryId], references: [id])
  createdBy   User               @relation("ProcedureCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?              @relation("ProcedureUpdatedBy", fields: [updatedById], references: [id])
  reviews     ProcedureReview[]
  versions    ProcedureVersion[]
}

model ProcedureVersion {
  id          String    @id @default(uuid())
  procedureId String
  version     String
  issueDate   DateTime
  notes       String?
  createdAt   DateTime  @default(now())
  createdById String
  documentId  String?
  createdBy   User      @relation(fields: [createdById], references: [id])
  document    Document? @relation(fields: [documentId], references: [id])
  procedure   Procedure @relation(fields: [procedureId], references: [id])
}

model ProcedureReview {
  id             String    @id @default(uuid())
  procedureId    String
  reviewedById   String
  reviewerName   String?
  details        String
  reviewDate     DateTime
  nextReviewDate DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  procedure      Procedure @relation(fields: [procedureId], references: [id], onDelete: Cascade)
  reviewedBy     User      @relation(fields: [reviewedById], references: [id])
}

model FormCategory {
  id          String   @id @default(uuid())
  title       String
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  archived    Boolean  @default(false)
  highlighted Boolean  @default(false)
  forms       Form[]
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Form {
  id              String        @id @default(uuid())
  title           String
  version         String
  issueDate       DateTime
  location        String
  categoryId      String
  createdById     String
  updatedById     String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  archived        Boolean       @default(false)
  order           Int           @default(0)
  approved        Boolean       @default(false)
  content         String?
  highlighted     Boolean       @default(false)
  retentionPeriod String?
  documents       Document[]
  category        FormCategory  @relation(fields: [categoryId], references: [id])
  createdBy       User          @relation("FormCreatedBy", fields: [createdById], references: [id])
  updatedBy       User?         @relation("FormUpdatedBy", fields: [updatedById], references: [id])
  reviews         FormReview[]
  versions        FormVersion[]
}

model FormVersion {
  id          String    @id @default(uuid())
  formId      String
  version     String
  issueDate   DateTime
  notes       String?
  createdAt   DateTime  @default(now())
  createdById String
  documentId  String?
  createdBy   User      @relation(fields: [createdById], references: [id])
  document    Document? @relation(fields: [documentId], references: [id])
  form        Form      @relation(fields: [formId], references: [id])
}

model FormReview {
  id             String    @id @default(uuid())
  formId         String
  reviewedById   String
  reviewerName   String?
  details        String
  reviewDate     DateTime
  nextReviewDate DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  form           Form      @relation(fields: [formId], references: [id], onDelete: Cascade)
  reviewedBy     User      @relation(fields: [reviewedById], references: [id])
}

model CertificateCategory {
  id           String        @id @default(uuid())
  title        String
  order        Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  archived     Boolean       @default(false)
  highlighted  Boolean       @default(false)
  certificates Certificate[]
}

model Certificate {
  id          String               @id @default(uuid())
  title       String
  version     String
  issueDate   DateTime
  location    String
  content     String?
  categoryId  String
  createdById String
  updatedById String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  archived    Boolean              @default(false)
  order       Int                  @default(0)
  highlighted Boolean              @default(false)
  approved    Boolean              @default(false)
  category    CertificateCategory  @relation(fields: [categoryId], references: [id])
  createdBy   User                 @relation("CertificateCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?                @relation("CertificateUpdatedBy", fields: [updatedById], references: [id])
  reviews     CertificateReview[]
  versions    CertificateVersion[]
  documents   Document[]
}

model CertificateVersion {
  id            String      @id @default(uuid())
  certificateId String
  version       String
  issueDate     DateTime
  notes         String?
  createdAt     DateTime    @default(now())
  createdById   String
  documentId    String?
  certificate   Certificate @relation(fields: [certificateId], references: [id])
  createdBy     User        @relation(fields: [createdById], references: [id])
  document      Document?   @relation(fields: [documentId], references: [id])
}

model CertificateReview {
  id             String      @id @default(uuid())
  certificateId  String
  reviewedById   String
  details        String
  reviewDate     DateTime
  nextReviewDate DateTime?
  reviewerName   String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  certificate    Certificate @relation(fields: [certificateId], references: [id], onDelete: Cascade)
  reviewedBy     User        @relation(fields: [reviewedById], references: [id])
}

model CorrectiveActionCategory {
  id                String             @id @default(uuid())
  title             String
  order             Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  archived          Boolean            @default(false)
  highlighted       Boolean            @default(false)
  correctiveActions CorrectiveAction[]
}

model CorrectiveAction {
  id          String                    @id @default(uuid())
  title       String
  version     String
  issueDate   DateTime
  location    String
  content     String?
  categoryId  String
  createdById String
  updatedById String?
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
  archived    Boolean                   @default(false)
  order       Int                       @default(0)
  highlighted Boolean                   @default(false)
  approved    Boolean                   @default(false)
  category    CorrectiveActionCategory  @relation(fields: [categoryId], references: [id])
  createdBy   User                      @relation("CorrectiveActionCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?                     @relation("CorrectiveActionUpdatedBy", fields: [updatedById], references: [id])
  reviews     CorrectiveActionReview[]
  versions    CorrectiveActionVersion[]
  documents   Document[]
}

model CorrectiveActionVersion {
  id                 String           @id @default(uuid())
  correctiveActionId String
  version            String
  issueDate          DateTime
  notes              String?
  createdAt          DateTime         @default(now())
  createdById        String
  documentId         String?
  correctiveAction   CorrectiveAction @relation(fields: [correctiveActionId], references: [id])
  createdBy          User             @relation(fields: [createdById], references: [id])
  document           Document?        @relation(fields: [documentId], references: [id])
}

model CorrectiveActionReview {
  id                 String           @id @default(uuid())
  correctiveActionId String
  reviewedById       String
  reviewerName       String?
  details            String
  reviewDate         DateTime
  nextReviewDate     DateTime?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  correctiveAction   CorrectiveAction @relation(fields: [correctiveActionId], references: [id], onDelete: Cascade)
  reviewedBy         User             @relation(fields: [reviewedById], references: [id])
}

model BusinessContinuityCategory {
  id                   String               @id @default(uuid())
  title                String
  order                Int                  @default(0)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  archived             Boolean              @default(false)
  highlighted          Boolean              @default(false)
  businessContinuities BusinessContinuity[]
}

model BusinessContinuity {
  id          String                      @id @default(uuid())
  title       String
  version     String
  issueDate   DateTime
  location    String
  content     String?
  categoryId  String
  createdById String
  updatedById String?
  createdAt   DateTime                    @default(now())
  updatedAt   DateTime                    @updatedAt
  archived    Boolean                     @default(false)
  order       Int                         @default(0)
  highlighted Boolean                     @default(false)
  approved    Boolean                     @default(false)
  category    BusinessContinuityCategory  @relation(fields: [categoryId], references: [id])
  createdBy   User                        @relation("BusinessContinuityCreatedBy", fields: [createdById], references: [id])
  updatedBy   User?                       @relation("BusinessContinuityUpdatedBy", fields: [updatedById], references: [id])
  reviews     BusinessContinuityReview[]
  versions    BusinessContinuityVersion[]
  documents   Document[]
}

model BusinessContinuityVersion {
  id                   String             @id @default(uuid())
  businessContinuityId String
  version              String
  issueDate            DateTime
  notes                String?
  createdAt            DateTime           @default(now())
  createdById          String
  documentId           String?
  businessContinuity   BusinessContinuity @relation(fields: [businessContinuityId], references: [id])
  createdBy            User               @relation(fields: [createdById], references: [id])
  document             Document?          @relation(fields: [documentId], references: [id])
}

model BusinessContinuityReview {
  id                   String             @id @default(uuid())
  businessContinuityId String
  reviewedById         String
  reviewerName         String?
  details              String
  reviewDate           DateTime
  nextReviewDate       DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  businessContinuity   BusinessContinuity @relation(fields: [businessContinuityId], references: [id])
  reviewedBy           User               @relation(fields: [reviewedById], references: [id])
}

model ManagementReviewCategory {
  id                String             @id @default(uuid())
  title             String
  order             Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  archived          Boolean            @default(false)
  highlighted       Boolean            @default(false)
  managementReviews ManagementReview[]
}

model ManagementReview {
  id             String                    @id @default(uuid())
  title          String
  createdById    String
  updatedById    String?
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  archived       Boolean                   @default(false)
  approved       Boolean                   @default(false)
  categoryId     String
  content        String?
  highlighted    Boolean                   @default(false)
  location       String
  nextReviewDate DateTime?
  order          Int                       @default(0)
  reviewDate     DateTime
  version        String
  documents      Document[]
  category       ManagementReviewCategory  @relation(fields: [categoryId], references: [id])
  createdBy      User                      @relation("ManagementReviewCreatedBy", fields: [createdById], references: [id])
  updatedBy      User?                     @relation("ManagementReviewUpdatedBy", fields: [updatedById], references: [id])
  reviews        ManagementReviewReview[]
  versions       ManagementReviewVersion[]
}

model ManagementReviewVersion {
  id                 String           @id @default(uuid())
  managementReviewId String
  version            String
  reviewDate         DateTime
  notes              String?
  createdAt          DateTime         @default(now())
  createdById        String
  documentId         String?
  createdBy          User             @relation(fields: [createdById], references: [id])
  document           Document?        @relation(fields: [documentId], references: [id])
  managementReview   ManagementReview @relation(fields: [managementReviewId], references: [id])
}

model ManagementReviewReview {
  id                 String           @id @default(uuid())
  managementReviewId String
  reviewedById       String
  reviewerName       String?
  details            String
  reviewDate         DateTime
  nextReviewDate     DateTime?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  managementReview   ManagementReview @relation(fields: [managementReviewId], references: [id])
  reviewedBy         User             @relation(fields: [reviewedById], references: [id])
}

model JobDescription {
  id             String                  @id @default(cuid())
  title          String
  version        String
  reviewDate     DateTime
  nextReviewDate DateTime?
  department     String
  content        String?
  highlighted    Boolean                 @default(false)
  approved       Boolean                 @default(false)
  archived       Boolean                 @default(false)
  order          Int
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  categoryId     String
  createdById    String
  updatedById    String?
  documents      Document[]
  category       JobDescriptionCategory  @relation(fields: [categoryId], references: [id])
  createdBy      User                    @relation("JobDescriptionCreatedBy", fields: [createdById], references: [id])
  updatedBy      User?                   @relation("JobDescriptionUpdatedBy", fields: [updatedById], references: [id])
  reviews        JobDescriptionReview[]
  versions       JobDescriptionVersion[]
}

model JobDescriptionCategory {
  id              String           @id @default(cuid())
  title           String
  description     String?
  order           Int
  archived        Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  highlighted     Boolean          @default(false)
  jobDescriptions JobDescription[]
}

model JobDescriptionVersion {
  id               String         @id @default(cuid())
  version          String
  reviewDate       DateTime
  notes            String?
  createdAt        DateTime       @default(now())
  jobDescriptionId String
  documentId       String?
  createdById      String
  createdBy        User           @relation(fields: [createdById], references: [id])
  document         Document?      @relation(fields: [documentId], references: [id])
  jobDescription   JobDescription @relation(fields: [jobDescriptionId], references: [id])
}

model JobDescriptionReview {
  id               String         @id @default(cuid())
  reviewerName     String
  reviewDate       DateTime
  nextReviewDate   DateTime?
  details          String
  createdAt        DateTime       @default(now())
  jobDescriptionId String
  reviewedById     String
  jobDescription   JobDescription @relation(fields: [jobDescriptionId], references: [id])
  reviewedBy       User           @relation(fields: [reviewedById], references: [id])
}

model WorkInstruction {
  id             String                   @id @default(cuid())
  title          String
  version        String
  reviewDate     DateTime
  nextReviewDate DateTime?
  department     String
  content        String?
  highlighted    Boolean                  @default(false)
  approved       Boolean                  @default(false)
  archived       Boolean                  @default(false)
  order          Int
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  categoryId     String
  createdById    String
  updatedById    String?
  documents      Document[]
  category       WorkInstructionCategory  @relation(fields: [categoryId], references: [id])
  createdBy      User                     @relation("WorkInstructionCreatedBy", fields: [createdById], references: [id])
  updatedBy      User?                    @relation("WorkInstructionUpdatedBy", fields: [updatedById], references: [id])
  reviews        WorkInstructionReview[]
  versions       WorkInstructionVersion[]
}

model WorkInstructionCategory {
  id               String            @id @default(cuid())
  title            String
  description      String?
  order            Int
  archived         Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  highlighted      Boolean           @default(false)
  workInstructions WorkInstruction[]
}

model WorkInstructionVersion {
  id                String          @id @default(cuid())
  version           String
  reviewDate        DateTime
  notes             String?
  createdAt         DateTime        @default(now())
  workInstructionId String
  documentId        String?
  createdById       String
  createdBy         User            @relation(fields: [createdById], references: [id])
  document          Document?       @relation(fields: [documentId], references: [id])
  workInstruction   WorkInstruction @relation(fields: [workInstructionId], references: [id])
}

model WorkInstructionReview {
  id                String          @id @default(cuid())
  reviewerName      String
  reviewDate        DateTime
  nextReviewDate    DateTime?
  details           String
  createdAt         DateTime        @default(now())
  workInstructionId String
  reviewedById      String
  reviewedBy        User            @relation(fields: [reviewedById], references: [id])
  workInstruction   WorkInstruction @relation(fields: [workInstructionId], references: [id])
}

model COSHHCategory {
  id          String   @id @default(cuid())
  title       String
  archived    Boolean  @default(false)
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  highlighted Boolean  @default(false)
  coshhs      COSHH[]
}

model COSHH {
  id             String         @id @default(cuid())
  title          String
  version        String
  reviewDate     DateTime
  nextReviewDate DateTime?
  department     String
  content        String?
  highlighted    Boolean        @default(false)
  approved       Boolean        @default(false)
  archived       Boolean        @default(false)
  order          Int
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  createdById    String
  updatedById    String?
  categoryId     String
  category       COSHHCategory  @relation(fields: [categoryId], references: [id])
  createdBy      User           @relation("COSHHCreatedBy", fields: [createdById], references: [id])
  updatedBy      User?          @relation("COSHHUpdatedBy", fields: [updatedById], references: [id])
  reviews        COSHHReview[]
  versions       COSHHVersion[]
  documents      Document[]
}

model COSHHVersion {
  id          String    @id @default(cuid())
  version     String
  reviewDate  DateTime
  notes       String?
  createdAt   DateTime  @default(now())
  createdById String
  coshhId     String
  documentId  String?
  coshh       COSHH     @relation(fields: [coshhId], references: [id])
  createdBy   User      @relation(fields: [createdById], references: [id])
  document    Document? @relation(fields: [documentId], references: [id])
}

model COSHHReview {
  id             String    @id @default(cuid())
  reviewerName   String
  reviewDate     DateTime
  nextReviewDate DateTime?
  details        String
  createdAt      DateTime  @default(now())
  reviewedById   String
  coshhId        String
  coshh          COSHH     @relation(fields: [coshhId], references: [id])
  reviewedBy     User      @relation(fields: [reviewedById], references: [id])
}

model RiskAssessmentCategory {
  id              String           @id @default(cuid())
  title           String
  description     String?
  order           Int
  archived        Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  riskAssessments RiskAssessment[]
}

model RiskAssessment {
  id                     String                  @id @default(cuid())
  title                  String
  categoryId             String
  createdById            String
  updatedById            String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  archived               Boolean                 @default(false)
  order                  Int
  approved               Boolean                 @default(false)
  content                String?
  department             String
  highlighted            Boolean                 @default(false)
  nextReviewDate         DateTime?
  reviewDate             DateTime
  version                String
  additionalRequirements String?
  assessmentDetails      AssessmentDetail[]
  documents              Document[]
  ppeRequirements        PpeRequirements?
  category               RiskAssessmentCategory  @relation(fields: [categoryId], references: [id])
  createdBy              User                    @relation("RiskAssessmentCreatedBy", fields: [createdById], references: [id])
  updatedBy              User?                   @relation("RiskAssessmentUpdatedBy", fields: [updatedById], references: [id])
  riskAssessmentMatrix   RiskAssessmentMatrix?
  reviews                RiskAssessmentReview[]
  versions               RiskAssessmentVersion[]
  whoMayBeHarmed         WhoMayBeHarmed?
}

model RiskAssessmentVersion {
  id               String         @id @default(cuid())
  version          String
  reviewDate       DateTime
  notes            String?
  createdAt        DateTime       @default(now())
  riskAssessmentId String
  documentId       String?
  createdById      String
  createdBy        User           @relation(fields: [createdById], references: [id])
  document         Document?      @relation(fields: [documentId], references: [id])
  riskAssessment   RiskAssessment @relation(fields: [riskAssessmentId], references: [id])
}

model RiskAssessmentReview {
  id               String         @id @default(cuid())
  reviewerName     String
  reviewDate       DateTime
  nextReviewDate   DateTime?
  details          String
  createdAt        DateTime       @default(now())
  riskAssessmentId String
  reviewedById     String
  reviewedBy       User           @relation(fields: [reviewedById], references: [id])
  riskAssessment   RiskAssessment @relation(fields: [riskAssessmentId], references: [id])
}

model Register {
  id             String            @id @default(cuid())
  title          String
  version        String
  reviewDate     DateTime
  nextReviewDate DateTime?
  department     String
  content        String?
  highlighted    Boolean           @default(false)
  approved       Boolean           @default(false)
  archived       Boolean           @default(false)
  order          Int
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  categoryId     String
  createdById    String
  updatedById    String?
  documents      Document[]
  category       RegisterCategory  @relation(fields: [categoryId], references: [id])
  createdBy      User              @relation("RegisterCreatedBy", fields: [createdById], references: [id])
  updatedBy      User?             @relation("RegisterUpdatedBy", fields: [updatedById], references: [id])
  reviews        RegisterReview[]
  versions       RegisterVersion[]
}

model RegisterCategory {
  id          String     @id @default(cuid())
  title       String
  description String?
  order       Int
  archived    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  registers   Register[]
}

model RegisterVersion {
  id          String    @id @default(cuid())
  version     String
  reviewDate  DateTime
  notes       String?
  createdAt   DateTime  @default(now())
  registerId  String
  documentId  String?
  createdById String
  createdBy   User      @relation(fields: [createdById], references: [id])
  document    Document? @relation(fields: [documentId], references: [id])
  register    Register  @relation(fields: [registerId], references: [id])
}

model RegisterReview {
  id             String    @id @default(cuid())
  reviewerName   String
  reviewDate     DateTime
  nextReviewDate DateTime?
  details        String
  createdAt      DateTime  @default(now())
  registerId     String
  reviewedById   String
  register       Register  @relation(fields: [registerId], references: [id])
  reviewedBy     User      @relation(fields: [reviewedById], references: [id])
}

model HseGuidanceCategory {
  id           String        @id @default(cuid())
  title        String
  description  String?
  order        Int
  archived     Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  hseGuidances HseGuidance[]
}

model HseGuidance {
  id             String               @id @default(cuid())
  title          String
  version        String
  reviewDate     DateTime
  nextReviewDate DateTime?
  department     String
  content        String?
  highlighted    Boolean              @default(false)
  approved       Boolean              @default(false)
  archived       Boolean              @default(false)
  order          Int
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  categoryId     String
  createdById    String
  updatedById    String?
  documents      Document[]
  category       HseGuidanceCategory  @relation(fields: [categoryId], references: [id])
  createdBy      User                 @relation("HseGuidanceCreatedBy", fields: [createdById], references: [id])
  updatedBy      User?                @relation("HseGuidanceUpdatedBy", fields: [updatedById], references: [id])
  reviews        HseGuidanceReview[]
  versions       HseGuidanceVersion[]
}

model HseGuidanceVersion {
  id            String      @id @default(cuid())
  version       String
  reviewDate    DateTime
  notes         String?
  createdAt     DateTime    @default(now())
  hseGuidanceId String
  documentId    String?
  createdById   String
  createdBy     User        @relation(fields: [createdById], references: [id])
  document      Document?   @relation(fields: [documentId], references: [id])
  hseGuidance   HseGuidance @relation(fields: [hseGuidanceId], references: [id])
}

model HseGuidanceReview {
  id             String      @id @default(cuid())
  reviewerName   String
  reviewDate     DateTime
  nextReviewDate DateTime?
  details        String
  createdAt      DateTime    @default(now())
  hseGuidanceId  String
  reviewedById   String
  hseGuidance    HseGuidance @relation(fields: [hseGuidanceId], references: [id])
  reviewedBy     User        @relation(fields: [reviewedById], references: [id])
}

model TechnicalFileCategory {
  id             String          @id @default(cuid())
  title          String
  description    String?
  order          Int
  archived       Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  highlighted    Boolean         @default(false)
  technicalFiles TechnicalFile[]
}

model TechnicalFile {
  id             String                 @id @default(cuid())
  title          String
  version        String
  reviewDate     DateTime
  nextReviewDate DateTime?
  department     String
  content        String?
  highlighted    Boolean                @default(false)
  approved       Boolean                @default(false)
  archived       Boolean                @default(false)
  order          Int
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  categoryId     String
  createdById    String
  updatedById    String?
  documents      Document[]
  category       TechnicalFileCategory  @relation(fields: [categoryId], references: [id])
  createdBy      User                   @relation("TechnicalFileCreatedBy", fields: [createdById], references: [id])
  updatedBy      User?                  @relation("TechnicalFileUpdatedBy", fields: [updatedById], references: [id])
  reviews        TechnicalFileReview[]
  versions       TechnicalFileVersion[]
}

model TechnicalFileVersion {
  id              String        @id @default(cuid())
  version         String
  reviewDate      DateTime
  notes           String?
  createdAt       DateTime      @default(now())
  technicalFileId String
  documentId      String?
  createdById     String
  createdBy       User          @relation(fields: [createdById], references: [id])
  document        Document?     @relation(fields: [documentId], references: [id])
  technicalFile   TechnicalFile @relation(fields: [technicalFileId], references: [id])
}

model TechnicalFileReview {
  id              String        @id @default(cuid())
  reviewerName    String
  reviewDate      DateTime
  nextReviewDate  DateTime?
  details         String
  createdAt       DateTime      @default(now())
  technicalFileId String
  reviewedById    String
  reviewedBy      User          @relation(fields: [reviewedById], references: [id])
  technicalFile   TechnicalFile @relation(fields: [technicalFileId], references: [id])
}

model EnvironmentalGuidanceCategory {
  id                    String                  @id @default(cuid())
  title                 String
  description           String?
  order                 Int
  archived              Boolean                 @default(false)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  environmentalGuidance EnvironmentalGuidance[]
}

model EnvironmentalGuidance {
  id             String                         @id @default(cuid())
  title          String
  version        String
  reviewDate     DateTime
  nextReviewDate DateTime?
  department     String
  content        String?
  highlighted    Boolean                        @default(false)
  approved       Boolean                        @default(false)
  archived       Boolean                        @default(false)
  order          Int
  createdAt      DateTime                       @default(now())
  updatedAt      DateTime                       @updatedAt
  categoryId     String
  createdById    String
  updatedById    String?
  documents      Document[]
  category       EnvironmentalGuidanceCategory  @relation(fields: [categoryId], references: [id])
  createdBy      User                           @relation("EnvironmentalGuidanceCreatedBy", fields: [createdById], references: [id])
  updatedBy      User?                          @relation("EnvironmentalGuidanceUpdatedBy", fields: [updatedById], references: [id])
  reviews        EnvironmentalGuidanceReview[]
  versions       EnvironmentalGuidanceVersion[]
}

model EnvironmentalGuidanceVersion {
  id                      String                @id @default(cuid())
  version                 String
  reviewDate              DateTime
  notes                   String?
  createdAt               DateTime              @default(now())
  environmentalGuidanceId String
  documentId              String?
  createdById             String
  createdBy               User                  @relation(fields: [createdById], references: [id])
  document                Document?             @relation(fields: [documentId], references: [id])
  environmentalGuidance   EnvironmentalGuidance @relation(fields: [environmentalGuidanceId], references: [id])
}

model EnvironmentalGuidanceReview {
  id                      String                @id @default(cuid())
  reviewerName            String
  reviewDate              DateTime
  nextReviewDate          DateTime?
  details                 String
  createdAt               DateTime              @default(now())
  environmentalGuidanceId String
  reviewedById            String
  environmentalGuidance   EnvironmentalGuidance @relation(fields: [environmentalGuidanceId], references: [id])
  reviewedBy              User                  @relation(fields: [reviewedById], references: [id])
}

model CustomSectionCategory {
  id             String          @id @default(uuid())
  title          String
  description    String?
  order          Int             @default(0)
  archived       Boolean         @default(false)
  highlighted    Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  customSections CustomSection[] @relation("CustomSectionCategory")
}

model CustomSection {
  id               String                 @id @default(uuid())
  title            String
  description      String?
  version          String
  issueDate        DateTime
  reviewDate       DateTime?
  nextReviewDate   DateTime?
  department       String?
  content          String?
  icon             String
  order            Int                    @default(0)
  highlighted      Boolean                @default(false)
  approved         Boolean                @default(false)
  archived         Boolean                @default(false)
  isActive         Boolean                @default(true)
  restrictedAccess Boolean                @default(false)
  restrictedUsers  String[]
  metadata         Json?
  categoryId       String?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  createdById      String
  updatedById      String?
  category         CustomSectionCategory? @relation("CustomSectionCategory", fields: [categoryId], references: [id])
  createdBy        User                   @relation("CustomSectionCreatedBy", fields: [createdById], references: [id])
  updatedBy        User?                  @relation("CustomSectionUpdatedBy", fields: [updatedById], references: [id])
  reviews          CustomSectionReview[]  @relation("CustomSectionReviews")
  versions         CustomSectionVersion[] @relation("CustomSectionVersions")
  documents        Document[]             @relation("CustomSectionDocuments")
}

model CustomSectionVersion {
  id              String        @id @default(uuid())
  version         String
  issueDate       DateTime
  notes           String?
  createdAt       DateTime      @default(now())
  customSectionId String
  documentId      String?
  createdById     String
  createdBy       User          @relation(fields: [createdById], references: [id])
  customSection   CustomSection @relation("CustomSectionVersions", fields: [customSectionId], references: [id], onDelete: Cascade)
  document        Document?     @relation("CustomSectionVersionDocument", fields: [documentId], references: [id])
}

model CustomSectionReview {
  id              String        @id @default(uuid())
  reviewerName    String?
  reviewDate      DateTime
  nextReviewDate  DateTime?
  details         String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  customSectionId String
  reviewedById    String
  customSection   CustomSection @relation("CustomSectionReviews", fields: [customSectionId], references: [id], onDelete: Cascade)
  reviewedBy      User          @relation(fields: [reviewedById], references: [id])
}

model WhoMayBeHarmed {
  id                String         @id @default(cuid())
  employees         Boolean        @default(false)
  contractors       Boolean        @default(false)
  generalPublic     Boolean        @default(false)
  visitors          Boolean        @default(false)
  environment       Boolean        @default(false)
  others            Boolean        @default(false)
  othersDescription String?
  riskAssessmentId  String         @unique
  riskAssessment    RiskAssessment @relation(fields: [riskAssessmentId], references: [id], onDelete: Cascade)
}

model PpeRequirements {
  id                String         @id @default(cuid())
  safetyBoots       Boolean        @default(false)
  gloves            Boolean        @default(false)
  highVisTop        Boolean        @default(false)
  highVisTrousers   Boolean        @default(false)
  overalls          Boolean        @default(false)
  safetyHelmet      Boolean        @default(false)
  earDefenders      Boolean        @default(false)
  safetyGoggles     Boolean        @default(false)
  safetyGlasses     Boolean        @default(false)
  others            Boolean        @default(false)
  othersDescription String?
  riskAssessmentId  String         @unique
  riskAssessment    RiskAssessment @relation(fields: [riskAssessmentId], references: [id], onDelete: Cascade)
}

model RiskAssessmentMatrix {
  id               String         @id @default(cuid())
  severity5        String         @default("Major (Fatality, Loss or damage causes serious business disruption; major fire, explosion etc.)")
  severity4        String         @default("Fairly High (Permanent disability, loss of limb, hearing or sight to one or more persons. Loss or damage is such that it could cause serious business disruption; fire, flood etc.)")
  severity3        String         @default("Moderate (breaks/fractures, loss or damage is such that it could cause minor business disruption)")
  severity2        String         @default("Minor (Minor Injury or illness, no lost time other than minor first aid, loss or damage not exceeding £100)")
  severity1        String         @default("Very Low (Minor cuts or scratches, no lost time or business disruption)")
  likelihood5      String         @default("Certain")
  likelihood4      String         @default("Very Likely")
  likelihood3      String         @default("Likely")
  likelihood2      String         @default("Unlikely")
  likelihood1      String         @default("Very Unlikely")
  riskLevel17Plus  String         @default("High Risk - Not acceptable. Apply mitigation to eliminate or to further reduce the risk.")
  riskLevel8To16   String         @default("Medium Risk - Apply mitigation to eliminate or reduce the risk, and if it remains a high risk, develop robust control measures to limit and manage the effects of any hazards.")
  riskLevel1To7    String         @default("Low Risk - May be accepted if all reasonably practicable control measures are in place, however, if more can be done to reduce or eliminate the risk, then it should be done.")
  riskAssessmentId String         @unique
  riskAssessment   RiskAssessment @relation(fields: [riskAssessmentId], references: [id], onDelete: Cascade)
}

model AssessmentDetail {
  id                 String         @id @default(cuid())
  hazardIdentified   String
  currentControls    String
  severity           Int
  likelihood         Int
  riskFactor         Int
  additionalControls String?
  residualRisk       String?
  riskAssessmentId   String
  order              Int            @default(0)
  riskAssessment     RiskAssessment @relation(fields: [riskAssessmentId], references: [id], onDelete: Cascade)
}

enum UserStatus {
  ACTIVE
  INVITED
  SUSPENDED
  INACTIVE
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}
